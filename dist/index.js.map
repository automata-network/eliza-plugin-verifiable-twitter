{"version":3,"sources":["../src/actions/post.ts","../src/templates.ts","../src/types.ts","../src/providers/verifiableTwitterSubagentProvider.ts","../src/index.ts"],"sourcesContent":["import {\n    type Action,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    composeContext,\n    elizaLogger,\n    ModelClass,\n    generateObject,\n    truncateToCompleteSentence,\n} from \"@elizaos/core\";\nimport { Scraper } from \"agent-twitter-client\";\nimport { tweetTemplate } from \"../templates\";\nimport { isTweetContent, TweetSchema } from \"../types\";\nimport { VerifiableTwitterSubagentProvider } from \"../providers/verifiableTwitterSubagentProvider\";\n\nexport const DEFAULT_MAX_TWEET_LENGTH = 280;\n\nasync function composeTweet(\n    runtime: IAgentRuntime,\n    _message: Memory,\n    state?: State\n): Promise<string> {\n    try {\n        const context = composeContext({\n            state,\n            template: tweetTemplate,\n        });\n\n        const tweetContentObject = await generateObject({\n            runtime,\n            context,\n            modelClass: ModelClass.SMALL,\n            schema: TweetSchema,\n            stop: [\"\\n\"],\n        });\n\n        if (!isTweetContent(tweetContentObject.object)) {\n            elizaLogger.error(\n                \"Invalid tweet content:\",\n                tweetContentObject.object\n            );\n            return;\n        }\n\n        let trimmedContent = tweetContentObject.object.text.trim();\n\n        // Truncate the content to the maximum tweet length specified in the environment settings.\n        const maxTweetLength = runtime.getSetting(\"MAX_TWEET_LENGTH\");\n        if (maxTweetLength) {\n            trimmedContent = truncateToCompleteSentence(\n                trimmedContent,\n                Number(maxTweetLength)\n            );\n        }\n\n        return trimmedContent;\n    } catch (error) {\n        elizaLogger.error(\"Error composing tweet:\", error);\n        throw error;\n    }\n}\n\nexport const postAction: Action = {\n    name: \"POST_VERIFIABLE_TWEET\",\n    similes: [\"POST_VERIFIABLE_TWEET\"],\n    description: \"Post a tweet to Twitter\",\n    validate: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ) => {\n        return !!runtime.getSetting(\"TWITTER_CONSUMER_KEY\")\n            && !!runtime.getSetting(\"TWITTER_CONSUMER_SECRET\")\n            && !!runtime.getSetting(\"TWITTER_ACCESS_TOKEN\")\n            && !!runtime.getSetting(\"TWITTER_ACCESS_TOKEN_SECRET\");\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State,\n        options?,\n        callback?\n    ): Promise<boolean> => {\n        try {\n            const client = new VerifiableTwitterSubagentProvider(\n                runtime.getSetting(\"TWITTER_CONSUMER_KEY\"),\n                runtime.getSetting(\"TWITTER_CONSUMER_SECRET\"),\n                runtime.getSetting(\"TWITTER_ACCESS_TOKEN\"),\n                runtime.getSetting(\"TWITTER_ACCESS_TOKEN_SECRET\")\n            );\n            // Generate tweet content using context\n            const tweetContent = await composeTweet(runtime, message, state);\n\n            if (!tweetContent) {\n                elizaLogger.error(\"No content generated for tweet\");\n                return false;\n            }\n\n            elizaLogger.log(`Generated tweet content: ${tweetContent}`);\n\n            // Check for dry run mode - explicitly check for string \"true\"\n            if (\n                process.env.TWITTER_DRY_RUN &&\n                process.env.TWITTER_DRY_RUN.toLowerCase() === \"true\"\n            ) {\n                elizaLogger.info(\n                    `Dry run: would have posted tweet: ${tweetContent}`\n                );\n                return true;\n            }\n\n            const attestationReport = await client.postTweet(tweetContent);\n            elizaLogger.info(`attestation report: ${attestationReport}`);\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in post action:\", error);\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"You should tweet that\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll share this update with my followers right away!\",\n                    action: \"POST_VERIFIABLE_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Post this tweet\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll post that as a tweet now.\",\n                    action: \"POST_VERIFIABLE_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Share that on Twitter\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll share this message on Twitter.\",\n                    action: \"POST_VERIFIABLE_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Post that on X\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll post this message on X right away.\",\n                    action: \"POST_VERIFIABLE_TWEET\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"You should put that on X dot com\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"I'll put this message up on X.com now.\",\n                    action: \"POST_VERIFIABLE_TWEET\",\n                },\n            },\n        ],\n    ],\n};\n","export const tweetTemplate = `\n# Context\n{{recentMessages}}\n\n# Topics\n{{topics}}\n\n# Post Directions\n{{postDirections}}\n\n# Recent interactions between {{agentName}} and other users:\n{{recentPostInteractions}}\n\n# Task\nGenerate a tweet that:\n1. Relates to the recent conversation or requested topic\n2. Matches the character's style and voice\n3. Is concise and engaging\n4. Must be UNDER 180 characters (this is a strict requirement)\n5. Speaks from the perspective of {{agentName}}\n\nGenerate only the tweet text, no other commentary.\n\nReturn the tweet in JSON format like: {\"text\": \"your tweet here\"}`;\n","import { z } from \"zod\";\n\nexport interface TweetContent {\n    text: string;\n}\n\nexport const TweetSchema = z.object({\n    text: z.string().describe(\"The text of the tweet\"),\n});\n\nexport const isTweetContent = (obj: unknown): obj is TweetContent => {\n    return TweetSchema.safeParse(obj).success;\n};\n","import { elizaLogger } from '@elizaos/core';\nimport http from 'http'\nimport https from 'https'\nimport net from 'net'\n\nexport class VerifiableTwitterSubagentProvider {\n  private readonly subagentUrl: string;\n  private readonly consumerKey: string;\n  private readonly consumerSecret: string;\n  private readonly accessToken: string;\n  private readonly accessTokenSecret: string\n\n  constructor(consumerKey: string, consumerSecret: string, accessToken: string, accessTokenSecret: string, subagentUrl?: string) {\n    if (!subagentUrl) {\n      subagentUrl = \"https://subagent.1rpc.io\";\n    }\n    this.subagentUrl = subagentUrl;\n    this.accessToken = accessToken;\n    this.accessTokenSecret = accessTokenSecret;\n    this.consumerKey = consumerKey;\n    this.consumerSecret = consumerSecret;\n  }\n\n  async postTweet(tweetContent: string): Promise<string> {\n    const params = {\n      consumer_key: this.consumerKey, \n      consumer_secret: this.consumerSecret, \n      access_token: this.accessToken,\n      access_token_secret: this.accessTokenSecret,\n      text: tweetContent,\n    };\n    const payload = JSON.stringify({ jsonrpc: \"2.0\", id: 1, method: \"tweet\", params: [params] });\n    elizaLogger.info(\"[VerifiableTwitterSubagent] send tweet:\", tweetContent)\n    const response = await send_rpc_request<any>(this.subagentUrl, '/', payload);\n    return response.result;\n  }\n}\n\nexport function send_rpc_request<T = any>(endpoint: string, path: string, payload: string): Promise<T> {\n    return new Promise((resolve, reject) => {\n      const abortController = new AbortController()\n      const timeout = setTimeout(() => {\n        abortController.abort()\n        reject(new Error('Request timed out'))\n      }, 30_000) // 30 seconds timeout\n  \n      const isHttp = endpoint.startsWith('http://') || endpoint.startsWith('https://')\n  \n      if (isHttp) {\n        const url = new URL(path, endpoint)\n        const options = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Content-Length': Buffer.byteLength(payload),\n          },\n        }\n  \n        const req = (url.protocol === 'https:' ? https : http).request(url, options, (res) => {\n          let data = ''\n          res.on('data', (chunk) => {\n            data += chunk\n          })\n          res.on('end', () => {\n            clearTimeout(timeout)\n            try {\n              const result = JSON.parse(data)\n              resolve(result as T)\n            } catch (error) {\n              reject(new Error('Failed to parse response'))\n            }\n          })\n        })\n  \n        req.on('error', (error) => {\n          clearTimeout(timeout)\n          reject(error)\n        })\n  \n        abortController.signal.addEventListener('abort', () => {\n          req.destroy()\n          reject(new Error('Request aborted'))\n        })\n  \n        req.write(payload)\n        req.end()\n      } else {\n        const client = net.createConnection({ path: endpoint }, () => {\n          client.write(`POST ${path} HTTP/1.1\\r\\n`)\n          client.write(`Host: localhost\\r\\n`)\n          client.write(`Content-Type: application/json\\r\\n`)\n          client.write(`Content-Length: ${payload.length}\\r\\n`)\n          client.write('\\r\\n')\n          client.write(payload)\n        })\n  \n        let data = ''\n        let headers: Record<string, string> = {}\n        let headersParsed = false\n        let contentLength = 0\n        let bodyData = ''\n  \n        client.on('data', (chunk) => {\n          data += chunk\n          if (!headersParsed) {\n            const headerEndIndex = data.indexOf('\\r\\n\\r\\n')\n            if (headerEndIndex !== -1) {\n              const headerLines = data.slice(0, headerEndIndex).split('\\r\\n')\n              headerLines.forEach(line => {\n                const [key, value] = line.split(': ')\n                if (key && value) {\n                  headers[key.toLowerCase()] = value\n                }\n              })\n              headersParsed = true\n              contentLength = parseInt(headers['content-length'] || '0', 10)\n              bodyData = data.slice(headerEndIndex + 4)\n            }\n          } else {\n            bodyData += chunk\n          }\n  \n          if (headersParsed && bodyData.length >= contentLength) {\n            client.end()\n          }\n        })\n  \n        client.on('end', () => {\n          clearTimeout(timeout)\n          try {\n            const result = JSON.parse(bodyData.slice(0, contentLength))\n            resolve(result as T)\n          } catch (error) {\n            reject(new Error('Failed to parse response'))\n          }\n        })\n  \n        client.on('error', (error) => {\n          clearTimeout(timeout)\n          reject(error)\n        })\n  \n        abortController.signal.addEventListener('abort', () => {\n          client.destroy()\n          reject(new Error('Request aborted'))\n        })\n      }\n    })\n  }","import type { Plugin } from \"@elizaos/core\";\nimport { postAction } from \"./actions/post\";\n\nexport const verifiableTwitterPlugin: Plugin = {\n    name: \"verifiable-twitter\",\n    description: \"Automata 1RPC Verifiable Twitter Subagent\",\n    actions: [postAction],\n    evaluators: [],\n    providers: [],\n};\n\nexport default verifiableTwitterPlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger"]}